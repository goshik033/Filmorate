-- Справочник рейтингов MPA
CREATE TABLE IF NOT EXISTS mpa_rating
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Пользователи
CREATE TABLE IF NOT EXISTS users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(255) NOT NULL UNIQUE,
    login    VARCHAR(100) NOT NULL UNIQUE,
    name     VARCHAR(255) NOT NULL,
    birthday DATE         NOT NULL
);

-- Фильмы
CREATE TABLE IF NOT EXISTS films
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name             VARCHAR(255) NOT NULL,
    description      TEXT         NOT NULL,
    release_date     DATE         NOT NULL,
    duration_minutes INTEGER      NOT NULL CHECK (duration_minutes > 0),
    mpa_rating_id    INTEGER      NOT NULL REFERENCES mpa_rating (id) ON UPDATE RESTRICT ON DELETE RESTRICT
);

-- Жанры
CREATE TABLE IF NOT EXISTS genres
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Связь фильм—жанр (многие-ко-многим)
CREATE TABLE IF NOT EXISTS film_genre
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id  INTEGER NOT NULL REFERENCES films (id) ON UPDATE CASCADE ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genres (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT uq_film_genre UNIQUE (film_id, genre_id)
);
CREATE INDEX IF NOT EXISTS idx_film_genre_film ON film_genre (film_id);
CREATE INDEX IF NOT EXISTS idx_film_genre_genre ON film_genre (genre_id);

-- Лайки пользователя фильму (многие-ко-многим)
CREATE TABLE IF NOT EXISTS user_likes_film
(
    id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER NOT NULL REFERENCES films (id) ON UPDATE CASCADE ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT uq_user_like UNIQUE (film_id, user_id)
);
CREATE INDEX IF NOT EXISTS idx_likes_film ON user_likes_film (film_id);
CREATE INDEX IF NOT EXISTS idx_likes_user ON user_likes_film (user_id);

-- Друзья (асимметричная запись: user_id -> friend_id)
CREATE TABLE IF NOT EXISTS friends
(
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    friend_id INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
--     status    BOOLEAN NOT NULL DEFAULT FALSE, -- FALSE: запрос, TRUE: подтверждено
    CONSTRAINT chk_self_friend CHECK (user_id <> friend_id),
    CONSTRAINT uq_friend_pair UNIQUE (user_id, friend_id)
);
CREATE INDEX IF NOT EXISTS idx_friends_user ON friends (user_id);
CREATE INDEX IF NOT EXISTS idx_friends_friend ON friends (friend_id);

COMMIT;
