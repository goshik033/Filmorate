-- Снести старые таблицы 
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS user_likes_film CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;

-- Справочник рейтингов MPA
CREATE TABLE mpa_rating
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Пользователи
CREATE TABLE users
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(255) NOT NULL UNIQUE,
    login    VARCHAR(100) NOT NULL UNIQUE,
    name     VARCHAR(255) NOT NULL,
    birthday DATE         NOT NULL
);

-- Фильмы
CREATE TABLE films
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name             VARCHAR(255) NOT NULL,
    description      TEXT         NOT NULL,
    release_date     DATE         NOT NULL,
    duration_minutes INTEGER      NOT NULL CHECK (duration_minutes > 0),
    mpa_rating_id    INTEGER      NOT NULL REFERENCES mpa_rating (id)
        ON UPDATE RESTRICT ON DELETE RESTRICT
);

-- Жанры
CREATE TABLE genres
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Связь фильм—жанр
CREATE TABLE film_genre
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id  INTEGER NOT NULL REFERENCES films (id) ON UPDATE CASCADE ON DELETE CASCADE,
    genre_id INTEGER NOT NULL REFERENCES genres (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT uq_film_genre UNIQUE (film_id, genre_id)
);
CREATE INDEX idx_film_genre_film ON film_genre (film_id);
CREATE INDEX idx_film_genre_genre ON film_genre (genre_id);

-- Лайки
CREATE TABLE user_likes_film
(
    id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER NOT NULL REFERENCES films (id) ON UPDATE CASCADE ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT uq_user_like UNIQUE (film_id, user_id)
);
CREATE INDEX idx_likes_film ON user_likes_film (film_id);
CREATE INDEX idx_likes_user ON user_likes_film (user_id);

-- Друзья
CREATE TABLE friends
(
    id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    friend_id INTEGER NOT NULL REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT chk_self_friend CHECK (user_id <> friend_id),
    CONSTRAINT uq_friend_pair UNIQUE (user_id, friend_id)
);
CREATE INDEX idx_friends_user ON friends (user_id);
CREATE INDEX idx_friends_friend ON friends (friend_id);

-- Отзывы
CREATE TABLE IF NOT EXISTS reviews
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id     INTEGER        NOT NULL REFERENCES films (id) ON DELETE CASCADE,
    user_id     INTEGER        NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    content     VARCHAR(1000) NOT NULL,
    is_positive BOOLEAN       NOT NULL,
    useful      INT           NOT NULL DEFAULT 0
);
CREATE TABLE IF NOT EXISTS review_likes
(
    review_id INTEGER REFERENCES reviews (id) ON DELETE CASCADE,
    user_id   INTEGER REFERENCES users (id) ON DELETE CASCADE,
    is_like   BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id)
);